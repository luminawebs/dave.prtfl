{"ast":null,"code":"// Automatic click tracking utility for elements without React handlers\nimport { trackButtonClick, trackLinkClick, trackContactClick } from './analytics';\nexport const initializeAutoTracking = () => {\n  // Wait for DOM to be fully loaded\n  const setupTracking = () => {\n    // Track all external links\n    document.querySelectorAll('a[href^=\"http\"], a[href^=\"https\"]').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          const href = link.getAttribute('href');\n          const text = link.textContent.trim() || link.getAttribute('title') || 'External Link';\n          trackLinkClick(href, text, 'External Link');\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n\n    // Track mailto links\n    document.querySelectorAll('a[href^=\"mailto:\"]').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          const email = link.getAttribute('href').replace('mailto:', '');\n          trackContactClick('Email', email);\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n\n    // Track tel links\n    document.querySelectorAll('a[href^=\"tel:\"]').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          const phone = link.getAttribute('href').replace('tel:', '');\n          trackContactClick('Phone', phone);\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n\n    // Track buttons that don't have React handlers\n    document.querySelectorAll('button, input[type=\"button\"], input[type=\"submit\"]').forEach(button => {\n      if (!button.dataset.tracked && !button.onclick) {\n        button.addEventListener('click', e => {\n          const text = button.textContent.trim() || button.getAttribute('value') || button.getAttribute('title') || 'Button Click';\n          trackButtonClick(text, 'Auto-tracked');\n        });\n        button.dataset.tracked = 'true';\n      }\n    });\n\n    // Track clicks on service cards that don't have explicit tracking\n    document.querySelectorAll('.service-card a, .card-action').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          var _card$querySelector;\n          const card = link.closest('.service-card');\n          const serviceTitle = card ? (_card$querySelector = card.querySelector('h3')) === null || _card$querySelector === void 0 ? void 0 : _card$querySelector.textContent.trim() : 'Service Card';\n          trackButtonClick(`Service Card - ${serviceTitle}`, 'Services');\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n\n    // Track social media links\n    document.querySelectorAll('a[href*=\"facebook\"], a[href*=\"twitter\"], a[href*=\"linkedin\"], a[href*=\"instagram\"], a[href*=\"youtube\"]').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          const href = link.getAttribute('href');\n          let platform = 'Social Media';\n          if (href.includes('facebook')) platform = 'Facebook';else if (href.includes('twitter')) platform = 'Twitter';else if (href.includes('linkedin')) platform = 'LinkedIn';else if (href.includes('instagram')) platform = 'Instagram';else if (href.includes('youtube')) platform = 'YouTube';\n          trackLinkClick(href, platform, 'Social Media');\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n\n    // Track download links\n    document.querySelectorAll('a[href$=\".pdf\"], a[href$=\".doc\"], a[href$=\".docx\"], a[href$=\".zip\"], a[href*=\"download\"]').forEach(link => {\n      if (!link.dataset.tracked) {\n        link.addEventListener('click', e => {\n          const href = link.getAttribute('href');\n          const fileName = href.split('/').pop() || 'Download';\n          trackLinkClick(href, fileName, 'Download');\n        });\n        link.dataset.tracked = 'true';\n      }\n    });\n  };\n\n  // Run immediately if DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupTracking);\n  } else {\n    setupTracking();\n  }\n\n  // Also run when new content is added (for dynamic content)\n  const observer = new MutationObserver(mutations => {\n    let shouldSetupTracking = false;\n    mutations.forEach(mutation => {\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType === 1) {\n            // Element node\n            shouldSetupTracking = true;\n          }\n        });\n      }\n    });\n    if (shouldSetupTracking) {\n      // Debounce the setup to avoid too many calls\n      clearTimeout(window.autoTrackingTimeout);\n      window.autoTrackingTimeout = setTimeout(setupTracking, 500);\n    }\n  });\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n};","map":{"version":3,"names":["trackButtonClick","trackLinkClick","trackContactClick","initializeAutoTracking","setupTracking","document","querySelectorAll","forEach","link","dataset","tracked","addEventListener","e","href","getAttribute","text","textContent","trim","email","replace","phone","button","onclick","_card$querySelector","card","closest","serviceTitle","querySelector","platform","includes","fileName","split","pop","readyState","observer","MutationObserver","mutations","shouldSetupTracking","mutation","type","addedNodes","length","node","nodeType","clearTimeout","window","autoTrackingTimeout","setTimeout","observe","body","childList","subtree"],"sources":["D:/00 Lumina Interactiva/website/Strategy/edunest.co/src/utils/autoTracking.js"],"sourcesContent":["// Automatic click tracking utility for elements without React handlers\r\nimport { trackButtonClick, trackLinkClick, trackContactClick } from './analytics';\r\n\r\nexport const initializeAutoTracking = () => {\r\n  // Wait for DOM to be fully loaded\r\n  const setupTracking = () => {\r\n    // Track all external links\r\n    document.querySelectorAll('a[href^=\"http\"], a[href^=\"https\"]').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const href = link.getAttribute('href');\r\n          const text = link.textContent.trim() || link.getAttribute('title') || 'External Link';\r\n          trackLinkClick(href, text, 'External Link');\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track mailto links\r\n    document.querySelectorAll('a[href^=\"mailto:\"]').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const email = link.getAttribute('href').replace('mailto:', '');\r\n          trackContactClick('Email', email);\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track tel links\r\n    document.querySelectorAll('a[href^=\"tel:\"]').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const phone = link.getAttribute('href').replace('tel:', '');\r\n          trackContactClick('Phone', phone);\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track buttons that don't have React handlers\r\n    document.querySelectorAll('button, input[type=\"button\"], input[type=\"submit\"]').forEach(button => {\r\n      if (!button.dataset.tracked && !button.onclick) {\r\n        button.addEventListener('click', (e) => {\r\n          const text = button.textContent.trim() || \r\n                      button.getAttribute('value') || \r\n                      button.getAttribute('title') || \r\n                      'Button Click';\r\n          trackButtonClick(text, 'Auto-tracked');\r\n        });\r\n        button.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track clicks on service cards that don't have explicit tracking\r\n    document.querySelectorAll('.service-card a, .card-action').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const card = link.closest('.service-card');\r\n          const serviceTitle = card ? card.querySelector('h3')?.textContent.trim() : 'Service Card';\r\n          trackButtonClick(`Service Card - ${serviceTitle}`, 'Services');\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track social media links\r\n    document.querySelectorAll('a[href*=\"facebook\"], a[href*=\"twitter\"], a[href*=\"linkedin\"], a[href*=\"instagram\"], a[href*=\"youtube\"]').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const href = link.getAttribute('href');\r\n          let platform = 'Social Media';\r\n          \r\n          if (href.includes('facebook')) platform = 'Facebook';\r\n          else if (href.includes('twitter')) platform = 'Twitter';\r\n          else if (href.includes('linkedin')) platform = 'LinkedIn';\r\n          else if (href.includes('instagram')) platform = 'Instagram';\r\n          else if (href.includes('youtube')) platform = 'YouTube';\r\n          \r\n          trackLinkClick(href, platform, 'Social Media');\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n\r\n    // Track download links\r\n    document.querySelectorAll('a[href$=\".pdf\"], a[href$=\".doc\"], a[href$=\".docx\"], a[href$=\".zip\"], a[href*=\"download\"]').forEach(link => {\r\n      if (!link.dataset.tracked) {\r\n        link.addEventListener('click', (e) => {\r\n          const href = link.getAttribute('href');\r\n          const fileName = href.split('/').pop() || 'Download';\r\n          trackLinkClick(href, fileName, 'Download');\r\n        });\r\n        link.dataset.tracked = 'true';\r\n      }\r\n    });\r\n  };\r\n\r\n  // Run immediately if DOM is ready\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', setupTracking);\r\n  } else {\r\n    setupTracking();\r\n  }\r\n\r\n  // Also run when new content is added (for dynamic content)\r\n  const observer = new MutationObserver((mutations) => {\r\n    let shouldSetupTracking = false;\r\n    \r\n    mutations.forEach((mutation) => {\r\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n        mutation.addedNodes.forEach((node) => {\r\n          if (node.nodeType === 1) { // Element node\r\n            shouldSetupTracking = true;\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    if (shouldSetupTracking) {\r\n      // Debounce the setup to avoid too many calls\r\n      clearTimeout(window.autoTrackingTimeout);\r\n      window.autoTrackingTimeout = setTimeout(setupTracking, 500);\r\n    }\r\n  });\r\n\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true\r\n  });\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}