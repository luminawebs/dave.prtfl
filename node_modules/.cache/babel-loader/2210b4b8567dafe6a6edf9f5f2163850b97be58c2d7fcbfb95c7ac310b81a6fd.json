{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const LanguageContext=/*#__PURE__*/createContext();export const useLanguage=()=>{const context=useContext(LanguageContext);if(!context){throw new Error('useLanguage must be used within a LanguageProvider');}return context;};export const LanguageProvider=_ref=>{let{children}=_ref;const[language,setLanguage]=useState(()=>{// Extract language from URL if available\nconst path=window.location.pathname;const urlLang=path.split('/')[1];if(['es','en'].includes(urlLang)){return urlLang;}// Check for saved language preference\nconst savedLanguage=localStorage.getItem('edunest-language');if(savedLanguage){return savedLanguage;}// Check browser language\nconst browserLanguage=navigator.language||navigator.userLanguage;if(browserLanguage.startsWith('es')){return'es';}// Default to Spanish\nreturn'es';});useEffect(()=>{localStorage.setItem('edunest-language',language);document.documentElement.lang=language;},[language]);// GeoIP-based language detection (only on first visit)\nuseEffect(()=>{const savedLanguage=localStorage.getItem('edunest-language');if(savedLanguage)return;// user already has preference\n// Fetch geolocation info from free ipapi.co (1k req/day free)\nfetch('https://ipapi.co/json/').then(res=>res.ok?res.json():null).then(data=>{if(!data)return;const country=data.country_code;// Simple mapping: common English-speaking countries → 'en', rest → 'es'\nconst englishCountries=['US','GB','CA','AU','NZ','IE'];const detectedLang=englishCountries.includes(country)?'en':'es';setLanguage(detectedLang);}).catch(()=>{/* silent fail – keep current language */});},[]);const switchLanguage=newLanguage=>{setLanguage(newLanguage);};// Helper to get localized path\nconst getLocalizedPath=function(path){let lang=arguments.length>1&&arguments[1]!==undefined?arguments[1]:language;// Remove leading slash if present\nconst cleanPath=path.startsWith('/')?path.slice(1):path;// Return path with language prefix\nreturn\"/\".concat(lang).concat(cleanPath?\"/\".concat(cleanPath):'');};const value={language,switchLanguage,getLocalizedPath,isSpanish:language==='es',isEnglish:language==='en'};return/*#__PURE__*/_jsx(LanguageContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}