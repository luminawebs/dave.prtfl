{"ast":null,"code":"// Email service using EmailJS for client-side email sending\n// Alternative: You can replace this with your own backend API\n// For EmailJS setup:\n// 1. Go to https://www.emailjs.com/\n// 2. Create an account and get your PUBLIC_KEY, SERVICE_ID, and TEMPLATE_ID\n// 3. Replace the values below with your actual EmailJS configuration\nconst EMAILJS_CONFIG={PUBLIC_KEY:process.env.REACT_APP_EMAILJS_PUBLIC_KEY||'your_emailjs_public_key',SERVICE_ID:process.env.REACT_APP_EMAILJS_SERVICE_ID||'your_service_id',TEMPLATE_ID:process.env.REACT_APP_EMAILJS_TEMPLATE_ID||'your_template_id'};/**\r\n * Send form data via email\r\n * @param {Object} formData - The form data to send\r\n * @param {Object} scores - Quiz scores\r\n * @param {Array} answers - Quiz answers\r\n * @returns {Promise} - EmailJS promise\r\n */export const sendFormData=async(formData,scores,answers)=>{// Initialize EmailJS if not already done\nif(window.emailjs&&!window.emailjs.initialized){try{window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);window.emailjs.initialized=true;console.log('EmailJS initialized with public key');}catch(error){console.warn('Failed to initialize EmailJS:',error);}}// Check if EmailJS is properly configured\nconst isEmailJSConfigured=window.emailjs&&EMAILJS_CONFIG.PUBLIC_KEY&&EMAILJS_CONFIG.SERVICE_ID&&EMAILJS_CONFIG.TEMPLATE_ID&&!EMAILJS_CONFIG.PUBLIC_KEY.includes('your_actual_public_key_here')&&!EMAILJS_CONFIG.PUBLIC_KEY.includes('your_emailjs_public_key')&&EMAILJS_CONFIG.PUBLIC_KEY.length>10// Valid keys are longer\n;if(!isEmailJSConfigured){console.warn('EmailJS not loaded. Form data logged to console instead.');console.log('Form Data:',{formData,scores,answers});return Promise.resolve({status:200,text:'Logged to console'});}// Prepare email template parameters\nconst templateParams={// User Information\nuser_name:formData.fullName,user_email:formData.email,user_company:formData.company||'Not provided',user_job_title:formData.jobTitle||'Not provided',// Quiz Results\ntotal_score:Math.round(Object.values(scores).reduce((a,b)=>a+b,0)/8),category1_score:Math.round(scores.category1/2),category2_score:Math.round(scores.category2/2),category3_score:Math.round(scores.category3/2),category4_score:Math.round(scores.category4/2),// Meeting Information\nschedule_meeting:formData.scheduleMeeting?'Yes':'No',meeting_date:formData.meetingDate||'Not requested',meeting_time:formData.meetingTime||'Not requested',// Newsletter subscription\nsubscribe_newsletter:formData.subscribe?'Yes':'No',// Detailed answers (formatted as text)\ndetailed_answers:answers.map((answer,index)=>\"Q\".concat(index+1,\": \").concat(answer.answer,\" (Score: \").concat(answer.score,\")\")).join('\\n'),// Submission timestamp\nsubmission_date:new Date().toLocaleString(),// Recipient email (your email where you want to receive the form data)\nto_email:process.env.REACT_APP_RECIPIENT_EMAIL||'your-email@example.com'};try{const response=await window.emailjs.send(EMAILJS_CONFIG.SERVICE_ID,EMAILJS_CONFIG.TEMPLATE_ID,templateParams,EMAILJS_CONFIG.PUBLIC_KEY);console.log('Email sent successfully:',response);return response;}catch(error){console.error('Failed to send email:',error);// Fallback: log to console if email fails\nconsole.log('Form Data (Email failed):',{formData,scores,answers});throw error;}};/**\r\n * Alternative backend API method\r\n * Use this if you have your own backend API\r\n */export const sendToBackendAPI=async(formData,scores,answers)=>{const API_ENDPOINT=process.env.REACT_APP_API_ENDPOINT||'/api/submit-form';try{const response=await fetch(API_ENDPOINT,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({formData,scores,answers,submissionTime:new Date().toISOString()})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('Form submitted to backend:',result);return result;}catch(error){console.error('Failed to submit to backend:',error);// Fallback: log to console if API fails\nconsole.log('Form Data (API failed):',{formData,scores,answers});throw error;}};","map":{"version":3,"names":["EMAILJS_CONFIG","PUBLIC_KEY","process","env","REACT_APP_EMAILJS_PUBLIC_KEY","SERVICE_ID","REACT_APP_EMAILJS_SERVICE_ID","TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","sendFormData","formData","scores","answers","window","emailjs","initialized","init","console","log","error","warn","isEmailJSConfigured","includes","length","Promise","resolve","status","text","templateParams","user_name","fullName","user_email","email","user_company","company","user_job_title","jobTitle","total_score","Math","round","Object","values","reduce","a","b","category1_score","category1","category2_score","category2","category3_score","category3","category4_score","category4","schedule_meeting","scheduleMeeting","meeting_date","meetingDate","meeting_time","meetingTime","subscribe_newsletter","subscribe","detailed_answers","map","answer","index","concat","score","join","submission_date","Date","toLocaleString","to_email","REACT_APP_RECIPIENT_EMAIL","response","send","sendToBackendAPI","API_ENDPOINT","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","submissionTime","toISOString","ok","Error","result","json"],"sources":["D:/00 Lumina Interactiva/website/Strategy/edunest.co/src/services/emailService.js"],"sourcesContent":["// Email service using EmailJS for client-side email sending\r\n// Alternative: You can replace this with your own backend API\r\n\r\n// For EmailJS setup:\r\n// 1. Go to https://www.emailjs.com/\r\n// 2. Create an account and get your PUBLIC_KEY, SERVICE_ID, and TEMPLATE_ID\r\n// 3. Replace the values below with your actual EmailJS configuration\r\n\r\nconst EMAILJS_CONFIG = {\r\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'your_emailjs_public_key',\r\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'your_service_id',\r\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'your_template_id'\r\n};\r\n\r\n/**\r\n * Send form data via email\r\n * @param {Object} formData - The form data to send\r\n * @param {Object} scores - Quiz scores\r\n * @param {Array} answers - Quiz answers\r\n * @returns {Promise} - EmailJS promise\r\n */\r\nexport const sendFormData = async (formData, scores, answers) => {\r\n  // Initialize EmailJS if not already done\r\n  if (window.emailjs && !window.emailjs.initialized) {\r\n    try {\r\n      window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\r\n      window.emailjs.initialized = true;\r\n      console.log('EmailJS initialized with public key');\r\n    } catch (error) {\r\n      console.warn('Failed to initialize EmailJS:', error);\r\n    }\r\n  }\r\n  \r\n  // Check if EmailJS is properly configured\r\n  const isEmailJSConfigured = (\r\n    window.emailjs && \r\n    EMAILJS_CONFIG.PUBLIC_KEY && \r\n    EMAILJS_CONFIG.SERVICE_ID && \r\n    EMAILJS_CONFIG.TEMPLATE_ID &&\r\n    !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_actual_public_key_here') &&\r\n    !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_emailjs_public_key') &&\r\n    EMAILJS_CONFIG.PUBLIC_KEY.length > 10 // Valid keys are longer\r\n  );\r\n  \r\n  if (!isEmailJSConfigured) {\r\n    console.warn('EmailJS not loaded. Form data logged to console instead.');\r\n    console.log('Form Data:', { formData, scores, answers });\r\n    return Promise.resolve({ status: 200, text: 'Logged to console' });\r\n  }\r\n\r\n  // Prepare email template parameters\r\n  const templateParams = {\r\n    // User Information\r\n    user_name: formData.fullName,\r\n    user_email: formData.email,\r\n    user_company: formData.company || 'Not provided',\r\n    user_job_title: formData.jobTitle || 'Not provided',\r\n    \r\n    // Quiz Results\r\n    total_score: Math.round(Object.values(scores).reduce((a, b) => a + b, 0) / 8),\r\n    category1_score: Math.round(scores.category1 / 2),\r\n    category2_score: Math.round(scores.category2 / 2),\r\n    category3_score: Math.round(scores.category3 / 2),\r\n    category4_score: Math.round(scores.category4 / 2),\r\n    \r\n    // Meeting Information\r\n    schedule_meeting: formData.scheduleMeeting ? 'Yes' : 'No',\r\n    meeting_date: formData.meetingDate || 'Not requested',\r\n    meeting_time: formData.meetingTime || 'Not requested',\r\n    \r\n    // Newsletter subscription\r\n    subscribe_newsletter: formData.subscribe ? 'Yes' : 'No',\r\n    \r\n    // Detailed answers (formatted as text)\r\n    detailed_answers: answers.map((answer, index) => \r\n      `Q${index + 1}: ${answer.answer} (Score: ${answer.score})`\r\n    ).join('\\n'),\r\n    \r\n    // Submission timestamp\r\n    submission_date: new Date().toLocaleString(),\r\n    \r\n    // Recipient email (your email where you want to receive the form data)\r\n    to_email: process.env.REACT_APP_RECIPIENT_EMAIL || 'your-email@example.com'\r\n  };\r\n\r\n  try {\r\n    const response = await window.emailjs.send(\r\n      EMAILJS_CONFIG.SERVICE_ID,\r\n      EMAILJS_CONFIG.TEMPLATE_ID,\r\n      templateParams,\r\n      EMAILJS_CONFIG.PUBLIC_KEY\r\n    );\r\n    \r\n    console.log('Email sent successfully:', response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    // Fallback: log to console if email fails\r\n    console.log('Form Data (Email failed):', { formData, scores, answers });\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Alternative backend API method\r\n * Use this if you have your own backend API\r\n */\r\nexport const sendToBackendAPI = async (formData, scores, answers) => {\r\n  const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || '/api/submit-form';\r\n  \r\n  try {\r\n    const response = await fetch(API_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        formData,\r\n        scores,\r\n        answers,\r\n        submissionTime: new Date().toISOString()\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('Form submitted to backend:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Failed to submit to backend:', error);\r\n    // Fallback: log to console if API fails\r\n    console.log('Form Data (API failed):', { formData, scores, answers });\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}