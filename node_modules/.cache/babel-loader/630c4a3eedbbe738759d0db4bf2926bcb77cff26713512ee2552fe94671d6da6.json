{"ast":null,"code":"// Email service using EmailJS for client-side email sending\n// Alternative: You can replace this with your own backend API\n// For EmailJS setup:\n// 1. Go to https://www.emailjs.com/\n// 2. Create an account and get your PUBLIC_KEY, SERVICE_ID, and TEMPLATE_ID\n// 3. Replace the values below with your actual EmailJS configuration\nconst EMAILJS_CONFIG={PUBLIC_KEY:process.env.REACT_APP_EMAILJS_PUBLIC_KEY||'your_emailjs_public_key',SERVICE_ID:process.env.REACT_APP_EMAILJS_SERVICE_ID||'your_service_id',TEMPLATE_ID:process.env.REACT_APP_EMAILJS_TEMPLATE_ID||'your_template_id'};/**\r\n * Send form data via email\r\n * @param {Object} formData - The form data to send\r\n * @param {Object} scores - Quiz scores\r\n * @param {Array} answers - Quiz answers\r\n * @returns {Promise} - EmailJS promise\r\n */export const sendFormData=async(formData,scores,answers)=>{// Initialize EmailJS if not already done\nif(window.emailjs&&!window.emailjs.initialized){try{window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);window.emailjs.initialized=true;console.log('EmailJS initialized with public key');}catch(error){console.warn('Failed to initialize EmailJS:',error);}}// Check if EmailJS is properly configured\nconst isEmailJSConfigured=window.emailjs&&EMAILJS_CONFIG.PUBLIC_KEY&&EMAILJS_CONFIG.SERVICE_ID&&EMAILJS_CONFIG.TEMPLATE_ID&&!EMAILJS_CONFIG.PUBLIC_KEY.includes('your_actual_public_key_here')&&!EMAILJS_CONFIG.PUBLIC_KEY.includes('your_emailjs_public_key')&&EMAILJS_CONFIG.PUBLIC_KEY.length>10// Valid keys are longer\n;if(!isEmailJSConfigured){console.warn('EmailJS not loaded. Form data logged to console instead.');console.log('Form Data:',{formData,scores,answers});return Promise.resolve({status:200,text:'Logged to console'});}// Prepare email template parameters\nconst templateParams={// User Information\nuser_name:formData.fullName,user_email:formData.email,user_company:formData.company||'Not provided',user_job_title:formData.jobTitle||'Not provided',// Quiz Results\ntotal_score:Math.round(Object.values(scores).reduce((a,b)=>a+b,0)/8),category1_score:Math.round(scores.category1/2),category2_score:Math.round(scores.category2/2),category3_score:Math.round(scores.category3/2),category4_score:Math.round(scores.category4/2),// Meeting Information\nschedule_meeting:formData.scheduleMeeting?'Yes':'No',meeting_date:formData.meetingDate||'Not requested',meeting_time:formData.meetingTime||'Not requested',// Newsletter subscription\nsubscribe_newsletter:formData.subscribe?'Yes':'No',// Detailed answers (formatted as text)\ndetailed_answers:answers.map((answer,index)=>\"Q\".concat(index+1,\": \").concat(answer.answer,\" (Score: \").concat(answer.score,\")\")).join('\\n'),// Submission timestamp\nsubmission_date:new Date().toLocaleString(),// Recipient email (your email where you want to receive the form data)\nto_email:process.env.REACT_APP_RECIPIENT_EMAIL||'your-email@example.com'};try{const response=await window.emailjs.send(EMAILJS_CONFIG.SERVICE_ID,EMAILJS_CONFIG.TEMPLATE_ID,templateParams,EMAILJS_CONFIG.PUBLIC_KEY);console.log('Email sent successfully:',response);return response;}catch(error){console.error('Failed to send email:',error);// Fallback: log to console if email fails\nconsole.log('Form Data (Email failed):',{formData,scores,answers});throw error;}};/**\r\n * Alternative backend API method\r\n * Use this if you have your own backend API\r\n */export const sendToBackendAPI=async(formData,scores,answers)=>{const API_ENDPOINT=process.env.REACT_APP_API_ENDPOINT||'/api/submit-form';try{const response=await fetch(API_ENDPOINT,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({formData,scores,answers,submissionTime:new Date().toISOString()})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('Form submitted to backend:',result);return result;}catch(error){console.error('Failed to submit to backend:',error);// Fallback: log to console if API fails\nconsole.log('Form Data (API failed):',{formData,scores,answers});throw error;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}