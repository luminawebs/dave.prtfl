{"ast":null,"code":"// Email service using EmailJS for client-side email sending\n// Alternative: You can replace this with your own backend API\n\n// For EmailJS setup:\n// 1. Go to https://www.emailjs.com/\n// 2. Create an account and get your PUBLIC_KEY, SERVICE_ID, and TEMPLATE_ID\n// 3. Replace the values below with your actual EmailJS configuration\n\nconst EMAILJS_CONFIG = {\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'your_emailjs_public_key',\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'your_service_id',\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'your_template_id'\n};\n\n/**\r\n * Send form data via email\r\n * @param {Object} formData - The form data to send\r\n * @param {Object} scores - Quiz scores\r\n * @param {Array} answers - Quiz answers\r\n * @returns {Promise} - EmailJS promise\r\n */\nexport const sendFormData = async (formData, scores, answers) => {\n  // Initialize EmailJS if not already done\n  if (window.emailjs && !window.emailjs.initialized) {\n    try {\n      window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\n      window.emailjs.initialized = true;\n      console.log('EmailJS initialized with public key');\n    } catch (error) {\n      console.warn('Failed to initialize EmailJS:', error);\n    }\n  }\n\n  // Check if EmailJS is properly configured\n  const isEmailJSConfigured = window.emailjs && EMAILJS_CONFIG.PUBLIC_KEY && EMAILJS_CONFIG.SERVICE_ID && EMAILJS_CONFIG.TEMPLATE_ID && !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_actual_public_key_here') && !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_emailjs_public_key') && EMAILJS_CONFIG.PUBLIC_KEY.length > 10 // Valid keys are longer\n  ;\n  if (!isEmailJSConfigured) {\n    console.warn('EmailJS not loaded. Form data logged to console instead.');\n    console.log('Form Data:', {\n      formData,\n      scores,\n      answers\n    });\n    return Promise.resolve({\n      status: 200,\n      text: 'Logged to console'\n    });\n  }\n\n  // Prepare email template parameters\n  const templateParams = {\n    // User Information\n    user_name: formData.fullName,\n    user_email: formData.email,\n    user_company: formData.company || 'Not provided',\n    user_job_title: formData.jobTitle || 'Not provided',\n    // Quiz Results\n    total_score: Math.round(Object.values(scores).reduce((a, b) => a + b, 0) / 8),\n    category1_score: Math.round(scores.category1 / 2),\n    category2_score: Math.round(scores.category2 / 2),\n    category3_score: Math.round(scores.category3 / 2),\n    category4_score: Math.round(scores.category4 / 2),\n    // Meeting Information\n    schedule_meeting: formData.scheduleMeeting ? 'Yes' : 'No',\n    meeting_date: formData.meetingDate || 'Not requested',\n    meeting_time: formData.meetingTime || 'Not requested',\n    // Newsletter subscription\n    subscribe_newsletter: formData.subscribe ? 'Yes' : 'No',\n    // Detailed answers (formatted as text)\n    detailed_answers: answers.map((answer, index) => `Q${index + 1}: ${answer.answer} (Score: ${answer.score})`).join('\\n'),\n    // Submission timestamp\n    submission_date: new Date().toLocaleString(),\n    // Recipient email (your email where you want to receive the form data)\n    to_email: process.env.REACT_APP_RECIPIENT_EMAIL || 'your-email@example.com'\n  };\n  try {\n    const response = await window.emailjs.send(EMAILJS_CONFIG.SERVICE_ID, EMAILJS_CONFIG.TEMPLATE_ID, templateParams, EMAILJS_CONFIG.PUBLIC_KEY);\n    console.log('Email sent successfully:', response);\n    return response;\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    // Fallback: log to console if email fails\n    console.log('Form Data (Email failed):', {\n      formData,\n      scores,\n      answers\n    });\n    throw error;\n  }\n};\n\n/**\r\n * Alternative backend API method\r\n * Use this if you have your own backend API\r\n */\nexport const sendToBackendAPI = async (formData, scores, answers) => {\n  const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || '/api/submit-form';\n  try {\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        formData,\n        scores,\n        answers,\n        submissionTime: new Date().toISOString()\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Form submitted to backend:', result);\n    return result;\n  } catch (error) {\n    console.error('Failed to submit to backend:', error);\n    // Fallback: log to console if API fails\n    console.log('Form Data (API failed):', {\n      formData,\n      scores,\n      answers\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["EMAILJS_CONFIG","PUBLIC_KEY","process","env","REACT_APP_EMAILJS_PUBLIC_KEY","SERVICE_ID","REACT_APP_EMAILJS_SERVICE_ID","TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","sendFormData","formData","scores","answers","window","emailjs","initialized","init","console","log","error","warn","isEmailJSConfigured","includes","length","Promise","resolve","status","text","templateParams","user_name","fullName","user_email","email","user_company","company","user_job_title","jobTitle","total_score","Math","round","Object","values","reduce","a","b","category1_score","category1","category2_score","category2","category3_score","category3","category4_score","category4","schedule_meeting","scheduleMeeting","meeting_date","meetingDate","meeting_time","meetingTime","subscribe_newsletter","subscribe","detailed_answers","map","answer","index","score","join","submission_date","Date","toLocaleString","to_email","REACT_APP_RECIPIENT_EMAIL","response","send","sendToBackendAPI","API_ENDPOINT","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","submissionTime","toISOString","ok","Error","result","json"],"sources":["D:/11 david.edunest.co/site/src/services/emailService.js"],"sourcesContent":["// Email service using EmailJS for client-side email sending\r\n// Alternative: You can replace this with your own backend API\r\n\r\n// For EmailJS setup:\r\n// 1. Go to https://www.emailjs.com/\r\n// 2. Create an account and get your PUBLIC_KEY, SERVICE_ID, and TEMPLATE_ID\r\n// 3. Replace the values below with your actual EmailJS configuration\r\n\r\nconst EMAILJS_CONFIG = {\r\n  PUBLIC_KEY: process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'your_emailjs_public_key',\r\n  SERVICE_ID: process.env.REACT_APP_EMAILJS_SERVICE_ID || 'your_service_id',\r\n  TEMPLATE_ID: process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'your_template_id'\r\n};\r\n\r\n/**\r\n * Send form data via email\r\n * @param {Object} formData - The form data to send\r\n * @param {Object} scores - Quiz scores\r\n * @param {Array} answers - Quiz answers\r\n * @returns {Promise} - EmailJS promise\r\n */\r\nexport const sendFormData = async (formData, scores, answers) => {\r\n  // Initialize EmailJS if not already done\r\n  if (window.emailjs && !window.emailjs.initialized) {\r\n    try {\r\n      window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);\r\n      window.emailjs.initialized = true;\r\n      console.log('EmailJS initialized with public key');\r\n    } catch (error) {\r\n      console.warn('Failed to initialize EmailJS:', error);\r\n    }\r\n  }\r\n  \r\n  // Check if EmailJS is properly configured\r\n  const isEmailJSConfigured = (\r\n    window.emailjs && \r\n    EMAILJS_CONFIG.PUBLIC_KEY && \r\n    EMAILJS_CONFIG.SERVICE_ID && \r\n    EMAILJS_CONFIG.TEMPLATE_ID &&\r\n    !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_actual_public_key_here') &&\r\n    !EMAILJS_CONFIG.PUBLIC_KEY.includes('your_emailjs_public_key') &&\r\n    EMAILJS_CONFIG.PUBLIC_KEY.length > 10 // Valid keys are longer\r\n  );\r\n  \r\n  if (!isEmailJSConfigured) {\r\n    console.warn('EmailJS not loaded. Form data logged to console instead.');\r\n    console.log('Form Data:', { formData, scores, answers });\r\n    return Promise.resolve({ status: 200, text: 'Logged to console' });\r\n  }\r\n\r\n  // Prepare email template parameters\r\n  const templateParams = {\r\n    // User Information\r\n    user_name: formData.fullName,\r\n    user_email: formData.email,\r\n    user_company: formData.company || 'Not provided',\r\n    user_job_title: formData.jobTitle || 'Not provided',\r\n    \r\n    // Quiz Results\r\n    total_score: Math.round(Object.values(scores).reduce((a, b) => a + b, 0) / 8),\r\n    category1_score: Math.round(scores.category1 / 2),\r\n    category2_score: Math.round(scores.category2 / 2),\r\n    category3_score: Math.round(scores.category3 / 2),\r\n    category4_score: Math.round(scores.category4 / 2),\r\n    \r\n    // Meeting Information\r\n    schedule_meeting: formData.scheduleMeeting ? 'Yes' : 'No',\r\n    meeting_date: formData.meetingDate || 'Not requested',\r\n    meeting_time: formData.meetingTime || 'Not requested',\r\n    \r\n    // Newsletter subscription\r\n    subscribe_newsletter: formData.subscribe ? 'Yes' : 'No',\r\n    \r\n    // Detailed answers (formatted as text)\r\n    detailed_answers: answers.map((answer, index) => \r\n      `Q${index + 1}: ${answer.answer} (Score: ${answer.score})`\r\n    ).join('\\n'),\r\n    \r\n    // Submission timestamp\r\n    submission_date: new Date().toLocaleString(),\r\n    \r\n    // Recipient email (your email where you want to receive the form data)\r\n    to_email: process.env.REACT_APP_RECIPIENT_EMAIL || 'your-email@example.com'\r\n  };\r\n\r\n  try {\r\n    const response = await window.emailjs.send(\r\n      EMAILJS_CONFIG.SERVICE_ID,\r\n      EMAILJS_CONFIG.TEMPLATE_ID,\r\n      templateParams,\r\n      EMAILJS_CONFIG.PUBLIC_KEY\r\n    );\r\n    \r\n    console.log('Email sent successfully:', response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Failed to send email:', error);\r\n    // Fallback: log to console if email fails\r\n    console.log('Form Data (Email failed):', { formData, scores, answers });\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Alternative backend API method\r\n * Use this if you have your own backend API\r\n */\r\nexport const sendToBackendAPI = async (formData, scores, answers) => {\r\n  const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || '/api/submit-form';\r\n  \r\n  try {\r\n    const response = await fetch(API_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        formData,\r\n        scores,\r\n        answers,\r\n        submissionTime: new Date().toISOString()\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('Form submitted to backend:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Failed to submit to backend:', error);\r\n    // Fallback: log to console if API fails\r\n    console.log('Form Data (API failed):', { formData, scores, answers });\r\n    throw error;\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}